{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"screen","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"unit.hide()\nsvg = requireSvgHelper()\nsvg._fontsize = 40\nButton, ButtonGroup, VirtualCursor = requireButton()\nsti = requireSafeTravelInfos()\nsti:initBti(requireBasicTravelInfos())\n\ndebug = {}\ng = {\n    needRefresh = true,\n}\n\nsvg.base = svg.base .. string.format([[\n<linearGradient  id=\"danger\" x1=\"0%%\" x2=\"0%%\" y1=\"0%%\" y2=\"100%%\">\n<stop offset=\"5%%\" stop-color=\"none\" stop-opacity=\"1\"/>\n<stop offset=\"10%%\" stop-color=\"%s\" stop-opacity=\"1\"/>\n<stop offset=\"35%%\" stop-color=\"%s\" stop-opacity=\"1\"/>\n<stop offset=\"45%%\" stop-color=\"%s\" stop-opacity=\"1\"/>\n<stop offset=\"55%%\" stop-color=\"%s\" stop-opacity=\"1\"/>\n<stop offset=\"65%%\" stop-color=\"%s\" stop-opacity=\"1\"/>\n<stop offset=\"90%%\" stop-color=\"%s\" stop-opacity=\"1\"/>\n<stop offset=\"95%%\" stop-color=\"none\" stop-opacity=\"1\"/>\n<stop offset=\"100%%\" stop-color=\"none\" stop-opacity=\"1\" />\n</linearGradient>]],\n    sti.dangerZonesColors[3],\n    sti.dangerZonesColors[2],\n    sti.dangerZonesColors[1],\n    sti.dangerZonesColors[1],\n    sti.dangerZonesColors[2],\n    sti.dangerZonesColors[3])\n\n--[[\n1 Alioth\n2 Madis\n3 Thades\n4 Talemai\n5 Feli\n6 Sicari\n7 Sinnen\n8 Teoma\n9 Jago\n10 Symeon\n11 Ion\n12 Lacobus\n]]\nsti.origin = 2\nsti.destination = 6\n\nsystem.showScreen(1)\nscreen.activate()\nunit.setTimer(\"tv\", 5)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"screen.deactivate()","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"if g.needRefresh then\n    svg.body = \"\"\n    \n    svg.body = svg.body .. sti:getSvgcode()\n    \n    screen.setSVG(svg.dump())\nelse\nend","filter":{"args":[{"value":"tv"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"--v1.2\nfunction requireSvgHelper()\n    local function isTable(t)   return type(t) == 'table'  end\n\n    local svg = {}\n    svg._fontsize = 20\n    svg._pad = 4\n    svg._tablepad = 30\n    svg._textColor = \"yellow\"\n    svg._displayKey = true\n    svg._displayTable = true\n\n    function svg.dump()\n        return svg.header .. svg.style .. \"</style><defs>\" .. svg.base .. \"</defs>\" .. svg.body .. svg.footer\n    end\n\n    function svg.toSVG(arr, x, ystart, settings, depth)\n        local svgtext = \"\"\n        ystart = ystart or 20\n        x = x or 25\n        settings = settings or {}\n        settings.maxDepth = settings.maxDepth or 99999\n        if (settings.displayKey == nil) then settings.displayKey = svg._displayKey end\n        if (settings.displayTable == nil) then settings.displayTable = svg._displayTable end\n        depth = depth or 0\n\n        local i = 0\n        local ii = 0\n        for k, v in pairs(arr) do\n            i = i + 1\n            if (depth == 0) then ii = ii + 1 end\n            local valueIsTable = isTable(v)\n            svgtext = svgtext .. string.format([[\n                <text x=\"%d\" y=\"%d\"\n                font-size=\"%dpx\" fill=\"%s\" stroke=\"black\" stroke-width=\"2\">\n                %s%s\n                </text>\n                ]], x + depth*svg._tablepad, (ystart + (i + ii - 1)*(svg._fontsize + svg._pad)),\n                svg._fontsize, svg._textColor,\n                settings.displayKey and (k..\" : \") or \"\", valueIsTable and \"{...}\" or v)\n            if (settings.displayTable and valueIsTable and (depth <= settings.maxDepth)) then\n                local svgtable, ret = svg.toSVG(v, x, (ystart + (i + ii)*(svg._fontsize + svg._pad)), settings, depth+1)\n                ii = ii + ret\n                svgtext = svgtext .. svgtable\n            end\n        end\n        return svgtext, i + ii\n    end\n\n    function svg.imageCut(path, imageSize, screenViewbox, svgViewbox) -- viewbox are rect: x y width height\n        return string.format([[\n            <svg x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" preserveAspectRatio=\"none\"\n            viewBox=\"%d %d %d %d\"\n            xmlns=\"http://www.w3.org/2000/svg\" \n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"> \n            <image width=\"%d\" height=\"%d\" xlink:href=\"%s\" />\n            </svg>]],\n            screenViewbox.x, screenViewbox.y, screenViewbox.width, screenViewbox.height,\n            svgViewbox.x, svgViewbox.y, svgViewbox.width, svgViewbox.height,\n            imageSize.width, imageSize.height, path)\n    end\n\n    svg.header = [[\n    <svg class=\"svg\"\n    width=\"1920\" height=\"1080\"\n    viewBox=\"0 0 1920 1080\"\n    xmlns=\"http://www.w3.org/2000/svg\" \n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"> \n    <style>\n    .svg {\n    position:absolute;\n    left: 0;\n    top: 0;\n    height: 100vh;\n    width: 100vw;\n    }\n    ]]\n    svg.style = [[]]\n    svg.base = [[]]\n    svg.footer = [[</svg>]]\n    svg.body = [[]]\n\n    return svg\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"3"},{"code":"-- button class and functions\n\n--v1\n--[[\n\t+ si trop de boutons Ã  check avec le vcursor, les register dans un tree (quad?)\n\tou simplement diviser l'ecrans en plusieurs zones (attentions aux overlaps)\n\n\t+ pas de depth pour l'instant\n]]\n\nfunction doNothing() end\n\nfunction requireButton()\n    -- Button\n    local Button = {}\n    Button.__index = Button\n    function Button.new(text, pos, size, fontsize)\n        local b = {\n            pos = vec3(pos),\n            size = {width=size.width,height=size.height},\n            fontsize = fontsize or 15,\n            active = true,\n            hovered = false, -- need bitmask\n            selected = false, -- need bitmask\n            canToggle = false,\n            buttonGroup = nil, -- a reference for buttons where only one can be selected at a time (later: several while holding shift)\n            text = text,\n            onHover = doNothing, -- a user defined func\n            onClick = doNothing, -- a user defined func\n        }\n        b = setmetatable(b, Button)\n        return b\n    end\n    \n    function Button:_click()\n        system.print(\"_click \" .. self.text)\n        if self.canToggle then\n            self:toggle()\n        end\n        self.onClick(self)\n    end\n\n    function Button:toggle()\n        self.selected = not self.selected\n        if self.buttonGroup then\n            self.buttonGroup:clearSelected() -- if shift is not down\n            if self.selected then \n                self.buttonGroup:addSelected(self)\n            end\n        end\n    end\n    \n    function Button:draw(newpos, flags)\n        flags = flags or {}\n        self.pos = newpos and vec3(newpos) or self.pos\n        --reduce class name len?\n        local rectclass = \"button-rect-default\"\n        if self.selected then rectclass = \"button-rect-selected\"\n        elseif self.hovered then rectclass = \"button-rect-hovered\" end\n        local textclass = \"button-text-default\"\n        if self.selected then textclass = \"button-text-selected\"\n        elseif self.hovered then textclass = \"button-text-hovered\" end\n        local textposY = math.floor(self.pos.y + self.fontsize + 0.35*(self.size.height-self.fontsize))\n        local round = math.floor(self.fontsize*0.4)\n        local svgcode = \"\"\n\n        if self.hovered or self.selected or flags.drawBorder ~= false then\n            svgcode = svgcode .. string.format([[\n                <rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" rx=\"%d\" ry=\"%d\" class=\"%s\" />]],\n                self.pos.x, self.pos.y, self.size.width, self.size.height, round, round, rectclass)\n        end\n        if self.text ~= \"\" then\n            svgcode = svgcode .. string.format([[\n                [[<text x=\"%d\" y=\"%d\" font-size=\"%d\" class=\"%s\">%s</text>]],\n                self.pos.x+5, textposY, self.fontsize, textclass, self.text)\n        end\n        return svgcode\n    end\n\n    -- ButtonGroup\n    local ButtonGroup = {}\n    ButtonGroup.__index = ButtonGroup\n    function ButtonGroup.new()\n        local bg = {\n            selected = {},\n        }\n        bg = setmetatable(bg, ButtonGroup)\n        return bg\n    end\n\n    function ButtonGroup:add(b) table.insert(self, b) end\n    function ButtonGroup:remove(b) table.remove(self, b) end\n\n    function ButtonGroup:clearSelected()\n        for i, button in ipairs(self.selected) do\n            button.selected = false\n            self.selected[i] = nil\n        end\n    end\n\n    function ButtonGroup:addSelected(b)\n        table.insert(self.selected, b)\n        --b.selected = true -- force selected button\n    end\n\n    function ButtonGroup:iter(imin, imax, f)\n        for i, b in ipairs(self) do\n            if i >= imin and i <= imax then\n                f(b)\n            end\n        end\n    end\n\n    --Vcursor\n    local VirtualCursor = {}\n    VirtualCursor.__index = VirtualCursor\n    VirtualCursor.pos = {x=1920/2, y=1080/2}\n    VirtualCursor.old = {x=1920/2, y=1080/2}\n    function\tVirtualCursor:updateButtonsStates(buttons)\n        if buttons == nil then\n            return false\n        end\n        local changes = false\n        for _, b in pairs(buttons) do\n            if b.active then\n                -- system.print(\"updateButtonsStates : \" .. b.text)\n                local rect = {\n                    x = b.pos.x,\n                    y = b.pos.y,\n                    width = b.size.width,\n                    height = b.size.height\n                }\n                local oldhover = b.hovered\n                b.hovered = isWithinRect(rect, self.pos)\n                if b.hovered then b.onHover(b) end\n                if oldhover ~= b.hovered then changes = true end\n            end\n        end\n        return changes\n    end\n    function\tVirtualCursor:tryClickOn(buttons)\n        if buttons == nil then\n            system.print(\"tryClickOn nil buttons\")\n            return false\n        end\n        local clicked = false\n        for _, b in pairs(buttons) do\n            if b.active then\n                if b.hovered then\n                    b:_click()\n                    clicked = true\n                end\n            end\n        end\n        return clicked\n    end\n\n    return setmetatable(Button, {\n            __call = function(_, ...) return Button.new(...) end\n        }),\n        setmetatable(ButtonGroup, {\n            __call = function(_, ...) return ButtonGroup.new(...) end\n        }),\n        VirtualCursor\nend\n\n-- funcs\nfunction goToLocation()\n    if g.menu.freezeCurrentLocation == 0 then\n        local key = g.menu.current.key\n        if key then\n            table.insert(g.menu.tree, 1, {location=g.menu.current.location[1][key], index=1, key=nil})\n            g.menu.depth = g.menu.depth + 1\n            g.menu.current = g.menu.tree[1]\n            loadCurrentLocation()\n        end\n    end\nend\n\nfunction\tgoToPreviousLocation()\n    if ((g.menu.freezeCurrentLocation == 0) and #g.menu.tree > 1) then\n        table.remove(g.menu.tree, 1)\n        g.menu.depth = g.menu.depth - 1\n        g.menu.current = g.menu.tree[1]\n        loadCurrentLocation()\n    end\nend\n\nfunction\tsetAsDestination()\n    local currentLocation = g.menu.current.location\n    local currentGroup = g.menu.specialLocations and 2 or 1\n    local currentSelectionKey = g.menu.current.key\n\n    if currentSelectionKey then\n        system.setWaypoint(\n            toDest(currentLocation[currentGroup][currentSelectionKey].pos)\n        )\n    else\n        system.setWaypoint(toDest(currentLocation.pos))\n    end\nend\n\nfunction\tchooseBookmarkMode()--or toggle show/hide personnal, publics\nend\n\nfunction\ttoggleTacticalView()\n    g.map.tacticalView = not g.map.tacticalView\n    g.map.needRefresh = true\nend\n\nfunction\trotateMap()--buttons or key?\nend\n\nfunction\texitDescriptionPanel()\n    --g.menu.description = false --not g.menu.description\n    g.map.needRefresh = true\nend\n\nfunction\tenterDescriptionPanel()\n    g.menu.description = true --not g.menu.description\n    g.map.needRefresh = true\nend\n\nfunction\tshowDescriptionPanel()\n    --g.menu.description = true --not g.menu.description\n\n    --display image\n    local currentGroup = g.menu.specialLocations and 2 or 1\n    local loca = g.menu.current.location[currentGroup][g.menu.current.key]\n    loca = g.menu.current.location\n    local description = loca and loca.description or nil\n\n    system.print(\"showDescriptionPanel : \" .. g.menu.current.location.name)\n\n    if description then\n        system.print(\"text content : \" .. description.text.content)\n\n        local svgVB = rect(description.viewbox)\n        local imageSize = vec3(description.size)\n        svg.body = g.menu.backgroundSvg\n        svg.body = svg.body .. svg.imageCut(description.path, imageSize, g.description.rect, svgVB)\n        local text = description.text or {title=\"No Title\", content=\"No Content\"}\n        -- im not a front guy\n        svg.body = svg.body .. svgTag(\"G\", \"Back\", {x=20, y=20}, 40, g.menu.color)\n        svg.body = svg.body .. [[<text x=\"600\" y=\"200\" font-size=\"25\" fill=\"white\">loading...</text>]]\n        local html = svg.dump() .. string.format([[\n            <style>\n            .des { position:absolute; left:25%%; right: 25%%; top: 52%%; }\n            .des p { font-size: 1.8em; }\n            </style>\n            <div class=\"des\">\n            <h1>%s</h1>\n            <p>%s</p>\n            </div>]],\n            text.title, text.content) \n        system.setScreen(html)\n        system.print(string.format(loca.name .. \" ::pos{0,0,%d,%d,%d}\",\n                math.floor(loca.pos.x),\n                math.floor(loca.pos.y),\n                math.floor(loca.pos.z)))\n    else -- nothing to show, reset\n        --g.menu.description = false --not g.menu.description\n    end\n\nend\n\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"4"},{"code":"--[[\n    STI v1.2\n\n    warning: this does not handle the safe zone\n\n    dep:\n        svghelper\n        BTI + brake time\n\n    todo:\n        calculate the safe zone bubble\n            need 4 points?\n        detect if parabol trajectory is in the middle of another travel route\n            give the best parabol route depending of the angle, with a set desto point\n]]\n\nlocal function round(num, numDecimalPlaces)\n    local mult = 10^(numDecimalPlaces or 0)\n    return math.floor(num * mult + 0.5) / mult\nend\n\nlocal image_links = {\n    Generic_Moon = \"assets.prod.novaquark.com/20368/f410e727-9d4d-4eab-98bf-22994b3fbdcf.png\",\n    Sun = \"assets.prod.novaquark.com/20368/0936494e-9b3d-4d60-9ea0-d93a3f3e29cd.png\",\n    Alioth = \"assets.prod.novaquark.com/20368/954f3adb-3369-4ea9-854d-a14606334152.png\",\n    Alioth_bis = \"assets.prod.novaquark.com/20368/b83225ed-fb96-404c-8c91-86ac15dfbbec.png\",\n    Sanctuary = \"assets.prod.novaquark.com/20368/1a70dbff-24bc-44cb-905c-6d375d9613b8.png\",\n    Feli = \"assets.prod.novaquark.com/20368/da91066c-b3fd-41f4-8c01-26131b0a7841.png\",\n    Ion = \"assets.prod.novaquark.com/20368/91d10712-dc51-4b73-9fc0-6f07d96605a6.png\",\n    Madis = \"assets.prod.novaquark.com/20368/46d57ef4-40ee-46ca-8cc5-5aee1504bbfe.png\",\n    Jago = \"assets.prod.novaquark.com/20368/7fca8389-6b70-4198-a9c3-4875d15edb38.png\",\n    Lacobus = \"assets.prod.novaquark.com/20368/cb67a6a4-933c-4688-a637-898c89eb5b94.png\",\n    Sicari = \"assets.prod.novaquark.com/20368/f6e2f801-075f-4ccd-ab94-46d060517e8f.png\",\n    Sinnen = \"assets.prod.novaquark.com/20368/54a99084-7c2b-461b-ab1f-ae4229b3b821.png\",\n    Symeon = \"assets.prod.novaquark.com/20368/97940324-f194-4e03-808d-d71733ad545a.png\",\n    Talemai = \"assets.prod.novaquark.com/20368/f68628d9-3245-4d76-968e-ad9c63a19c19.png\",\n    Teoma = \"assets.prod.novaquark.com/20368/5a01dd8c-3cf8-4151-99a2-83b22f1e7249.png\",\n    Thades = \"assets.prod.novaquark.com/20368/59f997a2-bcca-45cf-aa35-26e0e41ed5c1.png\",\n}\nlocal su = 200000\n\nfunction    requireSafeTravelInfos()\n    local sti = {}\n    sti.dangerZonesHeights = {\n        2*su, -- the detection range of a space radar, 100% sure to be caught by a scout warping\n        4*su, -- an arbitrary margin\n        6*su, -- another one \n    }\n    sti.dangerZonesColors = {\"#ff4d4d\", \"#ff8533\", \"#ffff66\"}\n    sti.planetaryProtection = 2.5*su\n    sti.safeRouteAngle = 20 --degree\n    sti.bti = nil\n    sti.origin = 1\n    sti.destination = 2\n    --[[\n        1 Alioth\n        2 Madis\n        3 Thades\n        4 Talemai\n        5 Feli\n        6 Sicari\n        7 Sinnen\n        8 Teoma\n        9 Jago\n        10 Symeon\n        11 Ion\n        12 Lacobus\n    ]]\n\n    sti.dangerZoneScreenHeight = 250 --px\n\n    function    sti:initBti(bti)\n        self.bti = bti\n        for k, v in pairs(self.bti.waypoints) do\n            v.image = image_links[v.name]\n        end\n    end\n\n    function    sti:getSvgDangerZones(ypos)\n       local svgcode = \"\"\n       --[=[\n       --large zone (yellow)\n       svgcode = svgcode .. string.format([[\n        <rect x=\"0\" y=\"%d\" width=\"1920\" height=\"%d\" fill=\"%s\"/>\n       ]], ypos-400, 400*2, self.dangerZonesColors[3])\n       --medium zone (orange)\n       svgcode = svgcode .. string.format([[\n        <rect x=\"0\" y=\"%d\" width=\"1920\" height=\"%d\" fill=\"%s\"/>\n       ]], ypos-250, 250*2, self.dangerZonesColors[2])\n       ]=]\n\n       --gradient zones\n       svgcode = svgcode .. string.format([[\n        <rect x=\"0\" y=\"%d\" width=\"1920\" height=\"%d\" fill=\"url(#danger)\" />\n       ]], ypos-self.dangerZoneScreenHeight, self.dangerZoneScreenHeight*2)\n       \n       --medium zone (red)\n       --[=[\n       svgcode = svgcode .. string.format([[\n        <rect x=\"0\" y=\"%d\" width=\"1920\" height=\"%d\" fill=\"%s\"/>\n       ]], ypos-75, 75*2, self.dangerZonesColors[1])\n       ]=]\n\n       --base route (flashy red)\n       svgcode = svgcode .. string.format([[\n        <line x1=\"0\" y1=\"%d\" x2=\"1920\" y2=\"%d\" stroke=\"red\" stroke-width=\"7\" />\n        ]], ypos, ypos)\n\n        return svgcode\n    end\n    function    sti:getSvgPlanetZones(ypos)\n        local svgcode = \"\"\n        local planetsize = {width=300, height=300}\n        local offsetX = 100\n        \n        --planetary protection\n        svgcode = svgcode .. string.format([[\n            <circle cx=\"%d\" cy=\"%d\" r=\"%d\" fill=\"black\" />\n            <circle cx=\"%d\" cy=\"%d\" r=\"%d\" fill=\"black\" />\n        ]], offsetX, math.floor(ypos),  math.floor(planetsize.width),\n            1920-offsetX, math.floor(ypos),  math.floor(planetsize.width))\n\n        --image\n        local imageSize = {width=512,height=512}\n        local svgViewbox = {x=0, y=0, width=512, height=512}\n        local screnViewbox = {\n            x = math.floor(0+offsetX-planetsize.width/2),\n            y = math.floor(ypos-planetsize.height/2),\n            width = planetsize.width,\n            height = planetsize.height\n        }\n        svgcode = svgcode .. svg.imageCut(self.bti.waypoints[self.origin].image, imageSize, screnViewbox, svgViewbox)\n        screnViewbox.x = 1920-offsetX-planetsize.width/2\n        svgcode = svgcode .. svg.imageCut(self.bti.waypoints[self.destination].image, imageSize, screnViewbox, svgViewbox)\n\n        local pvpOrigin = offsetX + planetsize.width\n        local pvpDestination = 1920 - offsetX - planetsize.width\n        return svgcode, pvpOrigin, pvpDestination\n    end\n    function    sti:getSvgDangerZoneForDirectTrajectory(shipHeight, shipPos, destination)\n        local svgcode = \"\"\n        local dangerDist = vec3(destination - shipPos):len()\n        if shipHeight > self.dangerZonesHeights[1] then\n            dangerDist = dangerDist * self.dangerZonesHeights[1] / shipHeight -- thales\n        end\n        svgcode = svgcode .. string.format([[\n            <text x=\"%d\" y=\"%d\" font-size=\"50\" fill=\"white\">Distance traveled in danger zone</text>\n            <text x=\"%d\" y=\"%d\" font-size=\"50\" fill=\"white\">for direct trajectory : %s su</text>]],\n            975, 50,\n            975, 100, round(dangerDist / 200000 - 2.5, 2))\n\n        return svgcode\n    end\n    function    sti:getSvgShip(ypos, x1, x2)\n        local svgcode = \"\"\n\n        local origin = vec3(self.bti.waypoints[self.origin])\n        local destination = vec3(self.bti.waypoints[self.destination])\n        local travel = destination - origin\n        local shipPos = vec3(core.getConstructWorldPos())\n        local floorVec = (shipPos - origin):project_on(travel)\n        local percent = floorVec:len() / travel:len()\n        local floorPos = origin + floorVec\n        local shipHeight = (shipPos - floorPos):len()\n        \n        --[[\n            debug.origin = self.bti.waypoints[self.origin].name\n            debug.destination = self.bti.waypoints[self.destination].name\n            debug.percent = percent\n            debug.shipHeight = shipHeight\n        ]]\n\n        local xfloor = math.floor(x1 + percent * (x2 - x1))\n        local yship = math.floor(self.dangerZoneScreenHeight * shipHeight / self.dangerZonesHeights[3])\n        yship = math.min(yship, 350)\n\n        svgcode = svgcode .. string.format([[\n            <circle cx=\"%d\" cy=\"%d\" r=\"12\" fill=\"black\" stroke=\"white\" stroke-width=4 />\n            <text x=\"%d\" y=\"%d\" font-size=\"50\" fill=\"white\" stroke=\"black\" stroke-width=\"20\">%s</text>\n            <line x1=\"%d\" y1=\"%d\" x2=\"%d\" y2=\"%d\" stroke=\"darkgray\" stroke-width=\"3\" />]],\n            xfloor, ypos-yship,\n            xfloor+30, ypos-yship, (round(shipHeight/200000, 2)..\" su\"),\n            xfloor, ypos, xfloor, ypos-yship)\n\n        --danger zone if going right to desto\n        svgcode = svgcode .. self:getSvgDangerZoneForDirectTrajectory(shipHeight, shipPos, destination)\n        return svgcode\n    end\n\n    function    sti:getSvgcode()\n        local svgcode = \"\"\n        local ypos = math.floor(1080*0.65)\n        svgcode = svgcode .. self:getSvgDangerZones(ypos)\n        local svgtmp, x1, x2 = self:getSvgPlanetZones(ypos)\n        svgcode = svgcode .. svgtmp\n        svgcode = svgcode .. self:getSvgShip(ypos, x1, x2)\n        svgcode = svgcode .. self.bti:getSvgcode(nil, self.bti.waypoints[self.destination])\n\n        return svgcode\n    end\n\n    return sti\nend\n\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"5"},{"code":"--[[\n    BTI v1.2\n    dependency: SvgHelper\n    \n    unit > start\n        svg = requireSvgHelper() -- or require(\"svghelper\")\n        bti = requireBasicTravelInfos()\n        system.showScreen(1)\n        unit.setTimer(\"eta\", 0.25)\n    unit > tick(eta)\n        svg.body = bti:getSvgcode()\n        system.setScreen(svg.dump())\n    system > actionStart(lshift)\n        bti.target = (bti.target - 1 + bti.maxWaypoints - 1) % bti.maxWaypoints + 1\n    system > actionStart(lalt)\n        bti.target = (bti.target - 1 + bti.maxWaypoints + 1) % bti.maxWaypoints + 1\n\n        todo: add sanctuary\n]]\n\nlocal function dhms(time, displayAll, sep)\n    displayAll = displayAll or false\n    sep = sep or {\"d\",\"h\",\"m\",\"s\"}\n    local dhmsValues = {86400, 3600, 60, 1}\n    local res = \"\"\n    for i, v in ipairs(dhmsValues) do\n        local r = math.floor(time / dhmsValues[i])\n        time = time % dhmsValues[i]\n        if displayAll or r ~= 0 then\n            res = res .. string.format([[%.2d%s]], r, sep[i])\n        end\n    end\n    return res ~= \"\" and res or (\"0\"..sep[4])\nend\n\nfunction requireBasicTravelInfos()\n    local bti = {}\n    bti.waypoints = {\n        {name=\"Alioth\", x=-8, y=-8, z=-126303},\n        {name=\"Madis\", x=17465536, y=22665536, z=-34464},\n        {name=\"Thades\", x=29165536, y=10865536, z=65536},\n        {name=\"Talemai\", x=-13234464, y=55765536, z=465536},\n        {name=\"Feli\", x=-43534464, y=22565536, z=-48934464},\n        {name=\"Sicari\", x=52765536, y=27165536, z=52065536},\n        {name=\"Sinnen\", x=58665536, y=29665536, z=58165536},\n        {name=\"Teoma\", x=80865536, y=54665536, z=-934464},\n        {name=\"Jago\", x=-94134464, y=12765536, z=-3634464},\n        {name=\"Symeon\", x=14165536, y=-85634464, z=-934464},\n        {name=\"Ion\", x=2865536, y=-99034464, z=-934464},\n        {name=\"Lacobus\", x=98865536, y=-13534464, z=-934464}\n    }\n    bti.maxWaypoints = 0\n    for _, v in ipairs(bti.waypoints) do\n        bti.maxWaypoints = bti.maxWaypoints + 1\n    end\n    bti.target = 1\n    bti.color = \"#99ccff\"\n\n    function\tbti:travelInfos(target, shipPos, speed, mass, pos, fontsize)\n        fontsize = fontsize or 18\n        pos = pos and pos or vec3(10, 80, 0)\n        local name = target.name or \"?\"\n        local dist = (shipPos - target):len()\n        local su = 200000\n        local t = 1000\n\n        local travel = {\n            atCurrentSpeed = math.floor(dist / speed),\n            atMaxSpeed = math.floor(dist / 8333),\n            warpCells = ((mass/t) * (dist/su) * 0.00024)\n        }\n\n        fontsize = fontsize or 20\n        local x = pos.x\n        local y = pos.y\n        local svgcode = string.format([[<g fill=\"%s\" font-size=\"%dpx\">]], self.color, fontsize)\n        --title\n        svgcode = svgcode .. string.format([[\n            <text x=\"%d\" y=\"%d\" font-weight=\"bold\" text-decoration=\"underline\">Travel time to %s (%dsu) :</text>]],\n            x, y, name, math.ceil(dist/su))\n        --current speed\n        y = y + fontsize\n        svgcode = svgcode .. string.format([[\n            <text x=\"%d\" y=\"%d\">At current speed: %s</text>]],\n            x, y, travel.atCurrentSpeed == 1/0 and \"â\" or dhms(travel.atCurrentSpeed))\n        --max speed\n        y = y + fontsize\n        svgcode = svgcode .. string.format([[\n            <text x=\"%d\" y=\"%d\">At max speed: %s</text>]],\n            x, y, dhms(travel.atMaxSpeed))\n        --warp cell\n        y = y + fontsize\n        svgcode = svgcode .. string.format([[\n            <text x=\"%d\" y=\"%d\">Warp cells for %dt : %s</text>]],\n            x, y, math.ceil(mass/t), math.ceil(travel.warpCells))\n\n        svgcode = svgcode .. [[</g>]]\n        return svgcode\n    end\n    \n    function\tbti:getSvgcode(pos, target) -- target is a vec3 with a \"name\" key\n        local speed = vec3(core.getWorldVelocity()):len()\n        local selectedTarget = target and target or self.waypoints[self.target]\n        local shipPos = vec3(core.getConstructWorldPos())\n        local mass = core.getConstructMass()\n\n        return self:travelInfos(selectedTarget, shipPos, speed, mass, pos, 60)\n    end\n    \n    return bti\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"6"}],"methods":[],"events":[]}