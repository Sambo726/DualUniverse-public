{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"---------------------------\n-- lib\n---------------------------\nlib = {}\nfunction lib.roundStr(num, numDecimalPlaces)\n\treturn string.format(\"%.\" .. (numDecimalPlaces or 0) .. \"f\", num)\nend\n---------------------------\n-- CSS\n---------------------------\ncss = {}\ncss.Color = {\n    green = \"#54b86d\",\n    red = \"#b85454\",\n    darkblue = \"#293d61\",\n}\n\ncss.globalPadding = \"padding-bottom: 0%;\"\ncss.globalBackGround = \"background-color: \"..css.Color.darkblue..\";\"\ncss.panelWidth = \"50%\"\ncss.panelHeight = \"100%\"\n\ncss.FontSize = {\n    default = \"1.5em\",\n    obstruction = \"1.5em\",\n}\ncss.Class = {\n    default = \"panelDefault\",\n    obstruction = \"panelObstruction\",\n}\ncss.Width = {\n    default = \"100%\",\n    obstruction = \"100%\",\n}\n\nfunction css.getBG(value)\n    local color = (value == 1) and css.Color.green or css.Color.red\n\tlocal s = [[style=\"background-color: ]]..color..[[;\"]]\n    return s;\nend\nfunction css.get_defaultStyle(arg)\n    local size = css.FontSize.default\n    if (arg) then size = arg.fontsize or size end\n    local style = [[\n<style>\nH1,H2,H3,H4 {background-color: cornflowerblue; color: black !important; text-align: center;}\nth, td {font-size: ]]..size..[[;}\n\ntd {\n    color: cornflowerblue !important;\n    background-color: ]]..css.Color.darkblue..[[;\n    font-weight: normal !important;\n    text-align: center;\n    padding-top: 0.5%;\n    padding-bottom: 0.5%\n}\n\n.]]..css.Class.default..[[ {\n    ]]..css.globalBackGround..[[\n}\n\n]]\n    return style\nend\nfunction css.get_voidPanel(arg)\n    local title = arg.title or \"<H2>Void Panel</H2>\"\n    local columnAmount = arg.columnAmount or 1\n    local columnSpacing = arg.columnSpacing or {}\n    local class = arg.class or css.Class.default\n    local width = arg.width or css.Width.default\n    \n    local panel = [[\n<div class=\"]]..class..[[\">\n<div style=\"width: ]]..width..[[; height: ]]..css.panelHeight..[[;]]..css.globalPadding..[[ text-align: left;\">\n    ]]..title..[[\n    <table align=center style=\"width: 100%\">\n        <tr>\n    \t\t<th width=2%>]]\n    for i = 1, columnAmount do\n        panel = panel ..[[<th></th><th width=]]..(columnSpacing[i] or \"2\")..[[%></th>]]\n    end\n\n    panel = panel ..\"</tr>\"\n    return panel\nend\n\n\n-------------------------------------------------\n-- config\n-------------------------------------------------\nlocal tableEnd = \"</table>\"\nlocal styleEnd = \"</style>\"\nlocal stylePanelEnd = \"</div>\"\nlocal screenDivEnd = \"</div>\"\n\nfunction get_style()\n    local html = [[\n.]]..css.Class.obstruction..[[ th, .]]..css.Class.obstruction..[[ td {\n    font-size: ]]..css.FontSize.obstruction..[[ !important;\n}\n.]]..css.Class.obstruction..[[ {\n    ]]..css.globalBackGround..[[\n    position: absolute;\n    top: 0.5%;\n    left: 0.5%\n}\n]]\n    return html\nend\n\nfunction\tget_ObstructionFor(e, name)       \n    local decimal = 2\n    \n    local maxTCurrent = e.getMaxThrust()\n    local currentThrust = e.getThrust()\n    local percentThrust = currentThrust / maxTCurrent\n    -- getCurrentMaxThrust getMaxThrust getMaxThrustBase getThrust\n   \n    local maxTBase = e.getMaxThrustBase()\n    local maxTEfficiency = e.getMaxThrustEfficiency()\n    \n    local obstructionFactor = e.getObstructionFactor()\n    local html = [[\n<tr>\n    <td></td>\n    <td>]]..name..[[</td><td></td>\n    <td ]]..css.getBG(obstructionFactor ~= 0 and 0 or 1)..[[></td><td></td>\n    <td>]]..lib.roundStr(obstructionFactor * 100, decimal)..[[</td><td></td>\n    <td>]]..lib.roundStr(currentThrust, 0)..\" (\"..lib.roundStr(percentThrust * 100, 0)..\"%)\"..[[</td><td></td>\n    <td style=\"text-align: right !important;\">]]..(maxTCurrent and lib.roundStr(maxTCurrent, 0) or \"-\")..[[ N</td><td></td>\n    <td style=\"text-align: right !important;\">]]..(maxTBase and lib.roundStr(maxTBase, 0) or \"-\")..[[ N</td><td></td>\n\t<td>]]..lib.roundStr(maxTEfficiency * 100, decimal)..[[</td><td></td>\n</tr>]]\n\treturn html\nend\n\nfunction get_slotsObstruction()\n    local html = \"\"\n    for i, v in ipairs(slots) do\n    \tlocal title = i..\"\"\n    \thtml = v and (html..get_ObstructionFor(slots[i], title)) or html\n    end\n    html = html..tableEnd\n\thtml = html..stylePanelEnd..screenDivEnd\n\treturn html\nend\n\n\n--------------------------------------\n-- start\n--------------------------------------\n-- atmo/space engines, hovers, rockets, stabilizers, wings, adjusters, atmo/space brakes, others ?\nslots = {slot1, slot2, slot3, slot4, slot5, slot6, slot7, slot8, slot9, slot10,}\n\npanelBase = css.get_defaultStyle{fontsize = css.FontSize.default} .. get_style() .. styleEnd\npanelBase = panelBase .. css.get_voidPanel{\n    title = \"<H2>Modules Obstruction</H2>\",\n    columnAmount = 5,\n    class = css.Class.obstruction,\n    width = css.Width.obstruction\n}\npanelBase = panelBase .. [[\n<tr>\n    <td></td>\n    <td><H5>Slots</H5></td><td></td>\n    <td><H5></H5></td><td></td>\n    <td><H5>Obstruction %</H5></td><td></td>\n    <td><H5>Current Thrust</H5></td><td></td>\n    <td><H5>Current Max Thrust</H5></td><td></td>\n    <td><H5>Base Max Trust</H5></td><td></td>\n\t<td><H5>Eff %</H5><td></td>\n</tr>\n]]\n\nunit.hide()\nsystem.showScreen(1)\nunit.setTimer(\"hud\", 0.5)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"system.setScreen(panelBase..get_slotsObstruction())","filter":{"args":[{"value":"hud"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"}],"methods":[],"events":[]}